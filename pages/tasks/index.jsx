import React, { useEffect, useState } from "react"
import Head from "next/head"
import { useAuth } from "../../lib/auth"
import TaskCard from "../../components/TaskCard"
import { HiPlus } from "react-icons/hi"
import AddTaskModal from "../../components/AddTaskModal"
import UpdateTaskModal from "../../components/UpdateTaskModal"
import useSWR from "swr"
import { getUserData } from "../../lib/admin"

export default function Home() {
    const [showAddModal, setShowAddModal] = useState(false)
    const [showUpdateModal, setShowUpdateModal] = useState(false)
    const [updateTaskData, setUpdateTaskData] = useState(null)

    const auth = useAuth()
    
    const [ tasks, setTasks ] = useState([])
    const [ subjects, setSubjects ] = useState([])
    const { data, mutate } = useSWR(auth.user ? auth.user.uid : null, getUserData)
    // const { data: dataTasks, mutate: mutateTasks } = useSWR(auth.user ? auth.user.uid : null, getUserTasks)
    // const { data: dataSubjects, mutate: mutateSubjects } = useSWR(auth.user ? auth.user.uid : null, getUserSubjects)

    useEffect(() => {
        if (!data) {
            setTasks([])
            setSubjects([])
            return
        }
        setTasks(data.data.tasks)
        setSubjects(data.data.subjects)
    }, [data])

    const handleUpdateModal = (data, show) => {
        setShowUpdateModal(show)
        setUpdateTaskData(data)
    }

    return (
        <>
            <Head>
                <title>Tasks - Study Tasks</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            { auth.user && (
                <>
                    <div className="flex flex-col flex-grow mt-4 md:mt-4">
                        <div className="flex flex-row flex-wrap gap-8">
                            {
                                tasks.length > 0 && tasks.map((task) => {
                                    return (
                                        <TaskCard key={task.id} task={task} mutate={mutate} updateHandler={handleUpdateModal}/>
                                    )
                                })
                            }
                            <div onClick={() => setShowAddModal(true)} className="p-6 w-72 h-48 max-w-sm border border-dashed border-8 rounded shadow-md border-nord9 cursor-pointer">
                                <div className="h-full flex justify-center items-center">
                                    <HiPlus className="mr-2 h-12 w-12 fill-nord9" />
                                    <h5 className="flex flex-row mb-2 text-xl md:text-2xl font-bold tracking-tight text-nord9 break-all">Add Task</h5>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    {
                        showAddModal && (
                            <AddTaskModal modalHandler={setShowAddModal} subjects={subjects} mutate={mutate} />
                        )
                    }
                    {
                        showUpdateModal && (
                            <UpdateTaskModal taskData={updateTaskData} subjects={subjects} modalHandler={handleUpdateModal} mutate={mutate} />
                        )
                    }
                </>
            )
        }
        </>
    )
}